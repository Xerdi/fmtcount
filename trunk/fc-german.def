% \subsubsection{fc-german.def}
% German definitions (thank you to K. H. Fricke for supplying
% this information)
%    \begin{macrocode}
\ProvidesFCLanguage{german}[2018/06/17]%
%    \end{macrocode}
% Define macro that converts a number or count register (first
% argument) to an ordinal, and stores the result in the
% second argument, which must be a control sequence.
% Masculine:
%    \begin{macrocode}
\newcommand{\@ordinalMgerman}[2]{%
  \edef#2{\number#1\relax.}%
}%
\global\let\@ordinalMgerman\@ordinalMgerman
%    \end{macrocode}
% Feminine:
%    \begin{macrocode}
\newcommand{\@ordinalFgerman}[2]{%
  \edef#2{\number#1\relax.}%
}%
\global\let\@ordinalFgerman\@ordinalFgerman
%    \end{macrocode}
% Neuter:
%    \begin{macrocode}
\newcommand{\@ordinalNgerman}[2]{%
  \edef#2{\number#1\relax.}%
}%
\global\let\@ordinalNgerman\@ordinalNgerman
%    \end{macrocode}
% Convert a number to text. The easiest way to do this is to
% break it up into units, tens and teens.
% Units (argument must be a number from 0 to 9, 1 on its own (eins)
% is dealt with separately):
%    \begin{macrocode}
\newcommand*\@@unitstringgerman[1]{%
  \ifcase#1%
    null%
    \or ein%
    \or zwei%
    \or drei%
    \or vier%
    \or fünf%
    \or sechs%
    \or sieben%
    \or acht%
    \or neun%
  \fi
}%
\global\let\@@unitstringgerman\@@unitstringgerman
%    \end{macrocode}
% Tens (argument must go from 1 to 10):
%    \begin{macrocode}
\newcommand*\@@tenstringgerman[1]{%
  \ifcase#1%
    \or zehn%
    \or zwanzig%
    \or dreißig%
    \or vierzig%
    \or fünfzig%
    \or sechzig%
    \or siebzig%
    \or achtzig%
    \or neunzig%
    \or einhundert%
  \fi
}%
\global\let\@@tenstringgerman\@@tenstringgerman
%    \end{macrocode}
% \cs{einhundert} is set to \verb|einhundert| by default, user can
% redefine this command to just \verb|hundert| if required, similarly
% for \cs{eintausend}.
%    \begin{macrocode}
\providecommand*{\einhundert}{einhundert}%
\providecommand*{\eintausend}{eintausend}%
\global\let\einhundert\einhundert
\global\let\eintausend\eintausend
%    \end{macrocode}
% Teens:
%    \begin{macrocode}
\newcommand*\@@teenstringgerman[1]{%
  \ifcase#1%
    zehn%
    \or elf%
    \or zwölf%
    \or dreizehn%
    \or vierzehn%
    \or fünfzehn%
    \or sechzehn%
    \or siebzehn%
    \or achtzehn%
    \or neunzehn%
  \fi
}%
\global\let\@@teenstringgerman\@@teenstringgerman
%    \end{macrocode}
% The results are stored in the second argument, but doesn't display
% anything.%
% \changes{3.02}{2016/01/12}{Replace \cs{DeclareRobustCommand} by
% \cs{newcommand*} as robustness is handled now at top level in
% \texttt{fmtcount.sty}, and we don't need \cs{long} macros. Concerned
% macros are \cs{@numberstringMgerman}, \cs{@NumberstringMgerman},
% \cs{@ordinalstringMgerman}, \cs{@ordinalstringFgerman},
% \cs{@ordinalstringNgerman}, \cs{@OrdinalstringMgerman},
% \cs{@OrdinalstringFgerman}, and \cs{@OrdinalstringNgerman}.}
%    \begin{macrocode}
\newcommand*{\@numberstringMgerman}[2]{%
  \let\@unitstring=\@@unitstringgerman
  \let\@teenstring=\@@teenstringgerman
  \let\@tenstring=\@@tenstringgerman
  \@@numberstringgerman{#1}{#2}%
}%
\global\let\@numberstringMgerman\@numberstringMgerman
%    \end{macrocode}
% Feminine and neuter forms:
%    \begin{macrocode}
\global\let\@numberstringFgerman=\@numberstringMgerman
\global\let\@numberstringNgerman=\@numberstringMgerman
%    \end{macrocode}
% As above, but initial letters in upper case:
%    \begin{macrocode}
\newcommand*{\@NumberstringMgerman}[2]{%
  \@numberstringMgerman{#1}{\@@num@str}%
  \edef#2{\noexpand\MakeUppercase\expandonce\@@num@str}%
}%
\global\let\@NumberstringMgerman\@NumberstringMgerman
%    \end{macrocode}
% Feminine and neuter form:
%    \begin{macrocode}
\global\let\@NumberstringFgerman=\@NumberstringMgerman
\global\let\@NumberstringNgerman=\@NumberstringMgerman
%    \end{macrocode}
% As above, but for ordinals.
%    \begin{macrocode}
\newcommand*{\@ordinalstringMgerman}[2]{%
  \let\@unitthstring=\@@unitthstringMgerman
  \let\@teenthstring=\@@teenthstringMgerman
  \let\@tenthstring=\@@tenthstringMgerman
  \let\@unitstring=\@@unitstringgerman
  \let\@teenstring=\@@teenstringgerman
  \let\@tenstring=\@@tenstringgerman
  \def\@thousandth{tausendster}%
  \def\@hundredth{hundertster}%
  \@@ordinalstringgerman{#1}{#2}%
}%
\global\let\@ordinalstringMgerman\@ordinalstringMgerman
%    \end{macrocode}
% Feminine form:
%    \begin{macrocode}
\newcommand*{\@ordinalstringFgerman}[2]{%
  \let\@unitthstring=\@@unitthstringFgerman
  \let\@teenthstring=\@@teenthstringFgerman
  \let\@tenthstring=\@@tenthstringFgerman
  \let\@unitstring=\@@unitstringgerman
  \let\@teenstring=\@@teenstringgerman
  \let\@tenstring=\@@tenstringgerman
  \def\@thousandth{tausendste}%
  \def\@hundredth{hundertste}%
  \@@ordinalstringgerman{#1}{#2}%
}%
\global\let\@ordinalstringFgerman\@ordinalstringFgerman
%    \end{macrocode}
% Neuter form:
%    \begin{macrocode}
\newcommand*{\@ordinalstringNgerman}[2]{%
  \let\@unitthstring=\@@unitthstringNgerman
  \let\@teenthstring=\@@teenthstringNgerman
  \let\@tenthstring=\@@tenthstringNgerman
  \let\@unitstring=\@@unitstringgerman
  \let\@teenstring=\@@teenstringgerman
  \let\@tenstring=\@@tenstringgerman
  \def\@thousandth{tausendstes}%
  \def\@hundredth{hunderstes}%
  \@@ordinalstringgerman{#1}{#2}%
}%
\global\let\@ordinalstringNgerman\@ordinalstringNgerman
%    \end{macrocode}
% As above, but with initial letters in upper case.
%    \begin{macrocode}
\newcommand*{\@OrdinalstringMgerman}[2]{%
 \@ordinalstringMgerman{#1}{\@@num@str}%
 \edef#2{\noexpand\MakeUppercase\expandonce\@@num@str}%
}%
\global\let\@OrdinalstringMgerman\@OrdinalstringMgerman
%    \end{macrocode}
% Feminine form:
%    \begin{macrocode}
\newcommand*{\@OrdinalstringFgerman}[2]{%
 \@ordinalstringFgerman{#1}{\@@num@str}%
 \edef#2{\noexpand\MakeUppercase\expandonce\@@num@str}%
}%
\global\let\@OrdinalstringFgerman\@OrdinalstringFgerman
%    \end{macrocode}
% Neuter form:
%    \begin{macrocode}
\newcommand*{\@OrdinalstringNgerman}[2]{%
 \@ordinalstringNgerman{#1}{\@@num@str}%
 \edef#2{\noexpand\MakeUppercase\expandonce\@@num@str}%
}%
\global\let\@OrdinalstringNgerman\@OrdinalstringNgerman
%    \end{macrocode}
% Code for converting numbers into textual ordinals. As before,
% it is easier to split it into units, tens and teens.
% Units:
%\changes{2.0}{2012-09-25}{fixed spelling mistake (correction
%provided by Dominik Waß enhoven)}
%    \begin{macrocode}
\newcommand*\@@unitthstringMgerman[1]{%
  \ifcase#1%
    nullter%
    \or erster%
    \or zweiter%
    \or dritter%
    \or vierter%
    \or fünfter%
    \or sechster%
    \or siebter%
    \or achter%
    \or neunter%
  \fi
}%
\global\let\@@unitthstringMgerman\@@unitthstringMgerman
%    \end{macrocode}
% Tens:
%    \begin{macrocode}
\newcommand*\@@tenthstringMgerman[1]{%
  \ifcase#1%
    \or zehnter%
    \or zwanzigster%
    \or dreißigster%
    \or vierzigster%
    \or fünfzigster%
    \or sechzigster%
    \or siebzigster%
    \or achtzigster%
    \or neunzigster%
  \fi
}%
\global\let\@@tenthstringMgerman\@@tenthstringMgerman
%    \end{macrocode}
% Teens:
%    \begin{macrocode}
\newcommand*\@@teenthstringMgerman[1]{%
  \ifcase#1%
    zehnter%
    \or elfter%
    \or zwölfter%
    \or dreizehnter%
    \or vierzehnter%
    \or fünfzehnter%
    \or sechzehnter%
    \or siebzehnter%
    \or achtzehnter%
    \or neunzehnter%
  \fi
}%
\global\let\@@teenthstringMgerman\@@teenthstringMgerman
%    \end{macrocode}
% Units (feminine):
%    \begin{macrocode}
\newcommand*\@@unitthstringFgerman[1]{%
  \ifcase#1%
    nullte%
    \or erste%
    \or zweite%
    \or dritte%
    \or vierte%
    \or fünfte%
    \or sechste%
    \or siebte%
    \or achte%
    \or neunte%
  \fi
}%
\global\let\@@unitthstringFgerman\@@unitthstringFgerman
%    \end{macrocode}
% Tens (feminine):
%    \begin{macrocode}
\newcommand*\@@tenthstringFgerman[1]{%
  \ifcase#1%
    \or zehnte%
    \or zwanzigste%
    \or dreißigste%
    \or vierzigste%
    \or fünfzigste%
    \or sechzigste%
    \or siebzigste%
    \or achtzigste%
    \or neunzigste%
  \fi
}%
\global\let\@@tenthstringFgerman\@@tenthstringFgerman
%    \end{macrocode}
% Teens (feminine)
%    \begin{macrocode}
\newcommand*\@@teenthstringFgerman[1]{%
  \ifcase#1%
    zehnte%
    \or elfte%
    \or zwölfte%
    \or dreizehnte%
    \or vierzehnte%
    \or fünfzehnte%
    \or sechzehnte%
    \or siebzehnte%
    \or achtzehnte%
    \or neunzehnte%
  \fi
}%
\global\let\@@teenthstringFgerman\@@teenthstringFgerman
%    \end{macrocode}
% Units (neuter):
%\changes{2.0}{2012-09-25}{fixed spelling mistake (correction
%provided by Dominik Wa\ss enhoven)}
%    \begin{macrocode}
\newcommand*\@@unitthstringNgerman[1]{%
  \ifcase#1%
    nulltes%
    \or erstes%
    \or zweites%
    \or drittes%
    \or viertes%
    \or fünftes%
    \or sechstes%
    \or siebtes%
    \or achtes%
    \or neuntes%
  \fi
}%
\global\let\@@unitthstringNgerman\@@unitthstringNgerman
%    \end{macrocode}
% Tens (neuter):
%    \begin{macrocode}
\newcommand*\@@tenthstringNgerman[1]{%
  \ifcase#1%
    \or zehntes%
    \or zwanzigstes%
    \or dreißigstes%
    \or vierzigstes%
    \or fünfzigstes%
    \or sechzigstes%
    \or siebzigstes%
    \or achtzigstes%
    \or neunzigstes%
  \fi
}%
\global\let\@@tenthstringNgerman\@@tenthstringNgerman
%    \end{macrocode}
% Teens (neuter)
%    \begin{macrocode}
\newcommand*\@@teenthstringNgerman[1]{%
  \ifcase#1%
    zehntes%
    \or elftes%
    \or zwölftes%
    \or dreizehntes%
    \or vierzehntes%
    \or fünfzehntes%
    \or sechzehntes%
    \or siebzehntes%
    \or achtzehntes%
    \or neunzehntes%
  \fi
}%
\global\let\@@teenthstringNgerman\@@teenthstringNgerman
%    \end{macrocode}
% This appends the results to \verb|\#2| for number \verb|\#2| (in range 0 to
% 100.)
% null and eins are dealt with separately in
% \verb|\@@numberstringgerman|.
%    \begin{macrocode}
\newcommand*\@@numberunderhundredgerman[2]{%
\ifnum#1<10\relax
  \ifnum#1>0\relax
    \eappto#2{\@unitstring{#1}}%
  \fi
\else
  \@tmpstrctr=#1\relax
  \@FCmodulo{\@tmpstrctr}{10}%
  \ifnum#1<20\relax
    \eappto#2{\@teenstring{\@tmpstrctr}}%
  \else
    \ifnum\@tmpstrctr=0\relax
    \else
      \eappto#2{\@unitstring{\@tmpstrctr}und}%
    \fi
    \@tmpstrctr=#1\relax
    \divide\@tmpstrctr by 10\relax
    \eappto#2{\@tenstring{\@tmpstrctr}}%
  \fi
\fi
}%
\global\let\@@numberunderhundredgerman\@@numberunderhundredgerman
%    \end{macrocode}
% This stores the results in the second argument 
% (which must be a control
% sequence), but it doesn't display anything.
%    \begin{macrocode}
\newcommand*\@@numberstringgerman[2]{%
\ifnum#1>99999\relax
  \PackageError{fmtcount}{Out of range}%
  {This macro only works for values less than 100000}%
\else
  \ifnum#1<0\relax
    \PackageError{fmtcount}{Negative numbers not permitted}%
    {This macro does not work for negative numbers, however
    you can try typing "minus" first, and then pass the modulus of
    this number}%
  \fi
\fi
\def#2{}%
\@strctr=#1\relax \divide\@strctr by 1000\relax
\ifnum\@strctr>1\relax
%    \end{macrocode}
% \#1 is $\geq 2000$, \cs{@strctr} now contains the number of thousands
%    \begin{macrocode}
 \@@numberunderhundredgerman{\@strctr}{#2}%
  \appto#2{tausend}%
\else
%    \end{macrocode}
% \#1 lies in range [1000,1999]
%    \begin{macrocode}
  \ifnum\@strctr=1\relax
    \eappto#2{\eintausend}%
  \fi
\fi
\@strctr=#1\relax
\@FCmodulo{\@strctr}{1000}%
\divide\@strctr by 100\relax
\ifnum\@strctr>1\relax
%    \end{macrocode}
% now dealing with number in range [200,999]
%    \begin{macrocode}
  \eappto#2{\@unitstring{\@strctr}hundert}%
\else
   \ifnum\@strctr=1\relax
%    \end{macrocode}
% dealing with number in range [100,199]
%    \begin{macrocode}
     \ifnum#1>1000\relax
%    \end{macrocode}
% if original number $> 1000$, use einhundert
%    \begin{macrocode}
        \appto#2{einhundert}%
     \else
%    \end{macrocode}
% otherwise use \cs{einhundert}
%    \begin{macrocode}
        \eappto#2{\einhundert}%
      \fi
   \fi
\fi
\@strctr=#1\relax
\@FCmodulo{\@strctr}{100}%
\ifnum#1=0\relax
  \def#2{null}%
\else
  \ifnum\@strctr=1\relax
    \appto#2{eins}%
  \else
    \@@numberunderhundredgerman{\@strctr}{#2}%
  \fi
\fi
}%
\global\let\@@numberstringgerman\@@numberstringgerman
%    \end{macrocode}
% As above, but for ordinals
%    \begin{macrocode}
\newcommand*\@@numberunderhundredthgerman[2]{%
\ifnum#1<10\relax
 \eappto#2{\@unitthstring{#1}}%
\else
  \@tmpstrctr=#1\relax
  \@FCmodulo{\@tmpstrctr}{10}%
  \ifnum#1<20\relax
    \eappto#2{\@teenthstring{\@tmpstrctr}}%
  \else
    \ifnum\@tmpstrctr=0\relax
    \else
      \eappto#2{\@unitstring{\@tmpstrctr}und}%
    \fi
    \@tmpstrctr=#1\relax
    \divide\@tmpstrctr by 10\relax
    \eappto#2{\@tenthstring{\@tmpstrctr}}%
  \fi
\fi
}%
\global\let\@@numberunderhundredthgerman\@@numberunderhundredthgerman
%    \end{macrocode}
%\changes{3.06}{2018/06/17}{Use \cs{@orgargctr} counter in order to fix bug
%\href{https://github.com/nlct/fmtcount/issues/33}{\#33}.}
%    \begin{macrocode}
\newcommand*\@@ordinalstringgerman[2]{%
\@orgargctr=#1\relax
\ifnum\@orgargctr>99999\relax
  \PackageError{fmtcount}{Out of range}%
  {This macro only works for values less than 100000}%
\else
  \ifnum\@orgargctr<0\relax
    \PackageError{fmtcount}{Negative numbers not permitted}%
    {This macro does not work for negative numbers, however
    you can try typing "minus" first, and then pass the modulus of
    this number}%
  \fi
\fi
\def#2{}%
\@strctr=\@orgargctr\divide\@strctr by 1000\relax
\ifnum\@strctr>1\relax
%    \end{macrocode}
% \#1 is $\geq 2000$, \cs{@strctr} now contains the number of thousands
%    \begin{macrocode}
\@@numberunderhundredgerman{\@strctr}{#2}%
%    \end{macrocode}
% is that it, or is there more?
%    \begin{macrocode}
  \@tmpstrctr=\@orgargctr\@FCmodulo{\@tmpstrctr}{1000}%
  \ifnum\@tmpstrctr=0\relax
    \eappto#2{\@thousandth}%
  \else
    \appto#2{tausend}%
  \fi
\else
%    \end{macrocode}
% \#1 lies in range [1000,1999]
%    \begin{macrocode}
  \ifnum\@strctr=1\relax
    \ifnum\@orgargctr=1000\relax
      \eappto#2{\@thousandth}%
    \else
      \eappto#2{\eintausend}%
    \fi
  \fi
\fi
\@strctr=\@orgargctr
\@FCmodulo{\@strctr}{1000}%
\divide\@strctr by 100\relax
\ifnum\@strctr>1\relax
%    \end{macrocode}
% now dealing with number in range [200,999]
% is that it, or is there more?
%    \begin{macrocode}
  \@tmpstrctr=\@orgargctr \@FCmodulo{\@tmpstrctr}{100}%
  \ifnum\@tmpstrctr=0\relax
     \ifnum\@strctr=1\relax
       \eappto#2{\@hundredth}%
     \else
       \eappto#2{\@unitstring{\@strctr}\@hundredth}%
     \fi
  \else
     \eappto#2{\@unitstring{\@strctr}hundert}%
  \fi
\else
   \ifnum\@strctr=1\relax
%    \end{macrocode}
% dealing with number in range [100,199]
% is that it, or is there more?
%    \begin{macrocode}
     \@tmpstrctr=\@orgargctr \@FCmodulo{\@tmpstrctr}{100}%
     \ifnum\@tmpstrctr=0\relax
        \eappto#2{\@hundredth}%
     \else
     \ifnum\@orgargctr>1000\relax
        \appto#2{einhundert}%
     \else
        \eappto#2{\einhundert}%
     \fi
     \fi
   \fi
\fi
\@strctr=\@orgargctr
\@FCmodulo{\@strctr}{100}%
\ifthenelse{\@strctr=0 \and \@orgargctr>0 }{}{%
\@@numberunderhundredthgerman{\@strctr}{#2}%
}%
}%
\global\let\@@ordinalstringgerman\@@ordinalstringgerman
%    \end{macrocode}
% Load fc-germanb.def if not already loaded
%    \begin{macrocode}
\FCloadlang{germanb}%
%    \end{macrocode}
% \setcounter{CodelineNo}{0}
