%% -*- mode: LaTeX -*-
%% This is file `fc-french.def',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% fmtcount.dtx  (with options: `fc-french.def,package')
%% 
%%  fmtcount.dtx
%%  Copyright 2009 Nicola Talbot
%% 
%%  This work may be distributed and/or modified under the
%%  conditions of the LaTeX Project Public License, either version 1.3
%%  of this license of (at your option) any later version.
%%  The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%%  and version 1.3 or later is part of all distributions of LaTeX
%%  version 2005/12/01 or later.
%% 
%%  This work has the LPPL maintenance status `maintained'.
%% 
%%  The Current Maintainer of this work is Nicola Talbot.
%% 
%%  This work consists of the files fmtcount.dtx and fmtcount.ins and the derived files fmtcount.sty,
%%  fc-british.def, fc-english.def, fc-french.def, fc-german.def, fc-italian.def, fc-portuges.def,
%%  fc-spanish.def, fc-UKenglish.def, fc-USenglish.def, fmtcount.perl, fc-lang.tex, fc-samp.tex.
%% 
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
\ProvidesFile{fc-french.def}[2007/05/26]
\RequirePackage{fcprefix}

% bignumber were developped based reference: http://www.alain.be/boece/noms_de_nombre.html


% ###########################################################################################################
% Options for French


% ===========================================================================================================
% s of cent
% -----------------------------------------------------------------------------------------------------------
% never=never place s after cent
% reformed=place s after cent conditionally to having 2..9 hundreds
% traditional=same as reformed, but no s if a ten or unit after hundreds is non zero
% -----------------------------------------------------------------------------------------------------------
\define@key{fcfrench}{s of cent}[reformed]{%
  \ifthenelse{\equal{#1}{never}}{%
    \def\fc@frenchoptions@s@of@cent{0}%
  }{%
    \ifthenelse{\equal{#1}{reformed}}{%
      \def\fc@frenchoptions@s@of@cent{1}%
    }{%
      \ifthenelse{\equal{#1}{traditional}}{%
        \def\fc@frenchoptions@s@of@cent{3}%
      }{%
        \PackageError{fmtcount}{Unexpected argument}{%
          French option `force s' expects `never', `reformed' or `traditional'
        }
      }%
    }% reformed
  }% never
}

% ===========================================================================================================
% dash or space
% -----------------------------------------------------------------------------------------------------------
% traditional=use dash for numbers below 100, except when `et' is used, and space otherwise
% reformed=reform of 1990, use dash except with million & milliard
% always=always use dashes to separate all words
% -----------------------------------------------------------------------------------------------------------
\define@key{fcfrench}{dash or space}[reformed]{%
  \ifthenelse{\equal{#1}{traditional}}{%
    \let\fc@frenchoptions@supermillion@dos\space%
    \let\fc@frenchoptions@submillion@dos\space
  }{%
    \ifthenelse{\equal{#1}{reformed}}{%
      \let\fc@frenchoptions@supermillion@dos\space
      \def\fc@frenchoptions@submillion@dos{-}%
    }{%
      \ifthenelse{\equal{#1}{always}}{%
        \def\fc@frenchoptions@supermillion@dos{-}%
        \def\fc@frenchoptions@submillion@dos{-}%
      }{%
        \PackageError{fmtcount}{Unexpected argument}{%
          French option `dash or space' expects `always', `reformed' or `traditional'
        }
      }%
    }% reformed
  }% never
}

% ===========================================================================================================
% scale
% -----------------------------------------------------------------------------------------------------------
% long= n-illions & n-illiards are used with 10^{6*n} = 1 n-illion, and 10^{6*n+3} = 1 n-illiard
% short=n-illions are used with 10^{3*n+3} = 1 n-illion
% recursive= 10^18 = un milliard de milliards
% -----------------------------------------------------------------------------------------------------------
\define@key{fcfrench}{scale}[recursive]{%
  \ifthenelse{\equal{#1}{long}}{%
      \let\fc@poweroften\fc@@poweroften@longscalefrench
  }{%
    \ifthenelse{\equal{#1}{recursive}}{%
      \let\fc@poweroften\fc@@poweroften@recursivefrench
    }{%
      \ifthenelse{\equal{#1}{short}}{%
        \let\fc@poweroften\fc@@poweroften@shortscalefrench
      }{%
        \PackageError{fmtcount}{Unexpected argument}{%
          French option `scale' expects `long', `recursive' or `short'
        }
      }%
    }% reformed
  }% never
}

% ===========================================================================================================
% milliard threshold
% -----------------------------------------------------------------------------------------------------------
% ignored if scale is different from `long'
% infinity= 
% infty= same as infinity
% any integer n>0=
% -----------------------------------------------------------------------------------------------------------
\define@key{fcfrench}{milliard threshold}[infinity]{%
  \ifthenelse{\equal{#1}{infinity}}{%
      \def\fc@longscale@milliard@threshold{0}%
  }{%
    \ifthenelse{\equal{#1}{infty}}{%
      \def\fc@longscale@milliard@threshold{0}%
    }{%
      \if Q\ifnum9<1#1Q\fi\else
      \PackageError{fmtcount}{Unexpected argument}{%
        French option `milliard threshold' expects `infinity', or equivalently `infty', or a non negative
        integer.}%
      \fi 
      \def\fc@longscale@milliard@threshold{#1}%
    }}%
}

\def\@tempa#1{%
  \define@key{fcfrench}{#1}[]{%
    \PackageError{fmtcount}{Unexpected argument}{French option with key `#1' does not take any value}%
  }
  \expandafter\def\csname KV@fcfrench@#1@default\endcsname{%
    \def\fmtcount@french{#1}%
  }
}
\@tempa{france}\@tempa{swiss}\@tempa{belgian}

\define@key{fcfrench}{dialect}[france]{%
  \ifthenelse{\equal{#1}{france}
    \or\equal{#1}{swiss}
    \or\equal{#1}{belgian}}{%
    \def\fmtcount@french{#1}}{%
    \PackageError{fmtcount}{Invalid value `#1' to french option dialect key}
    {Option `french' can only take the values `france',
      `belgian' or `swiss'}}}

\def\fc@UpperCaseFirstLetter#1#2\@nil{%
  \uppercase{#1}#2}

\def\fc@CaseIden#1\@nil{%
  #1%
}
\def\fc@UpperCaseAll#1\@nil{%
  \uppercase{#1}%
}

\let\fc@case\fc@CaseIden


\newcommand*{\@ordinalMfrench}[2]{%
\iffmtord@abbrv
  \edef#2{\number#1\relax\noexpand\fmtord{e}}%
\else
  \ifnum#1=1\relax
    \edef#2{\number#1\relax\noexpand\fmtord{er}}%
  \else
    \edef#2{\number#1\relax\noexpand\fmtord{eme}}%
  \fi
\fi}
\newcommand*{\@ordinalFfrench}[2]{%
\iffmtord@abbrv
  \edef#2{\number#1\relax\noexpand\fmtord{e}}%
\else
  \ifnum#1=1\relax
     \edef#2{\number#1\relax\noexpand\fmtord{ere}}%
  \else
     \edef#2{\number#1\relax\noexpand\fmtord{eme}}%
  \fi
\fi}
\let\@ordinalNfrench\@ordinalMfrench
\newcommand*{\@@unitstringfrench}[1]{%
\ifcase#1 %
z\'ero%
\or un%
\or deux%
\or trois%
\or quatre%
\or cinq%
\or six%
\or sept%
\or huit%
\or neuf%
\fi
}
\newcommand*{\@@unitstringFfrench}[1]{%
\ifnum#1=1%
une%
\else\@@unitstringfrench{#1}%
\fi
}
\newcommand*{\@@tenstringfrench}[1]{%
\ifcase#1%
\or dix%
\or vingt%
\or trente%
\or quarante%
\or cinquante%
\or soixante%
\or septante%
\or huitante%
\or nonante%
\or cent%
\fi
}
\newcommand*{\@@teenstringfrench}[1]{%
\ifcase#1 %
dix%
\or onze%
\or douze%
\or treize%
\or quatorze%
\or quinze%
\or seize%
\or dix-sept%
\or dix-huit%
\or dix-neuf%
\fi
}
\newcommand*{\@@seventiesfrench}[1]{%
\@tenstring{6}%
\ifnum#1=1 %
\ \@andname\
\else
-%
\fi
\@teenstring{#1}%
}
\newcommand*{\@@eightiesfrench}[1]{%
\@unitstring{4}-\@tenstring{2}%
\ifnum#1>0 %
-\@unitstring{#1}%
\else
s%
\fi
}
\newcommand*{\@@ninetiesfrench}[1]{%
\@unitstring{4}-\@tenstring{2}-\@teenstring{#1}%
}
\newcommand*{\@@seventiesfrenchswiss}[1]{%
\@tenstring{7}%
\ifnum#1=1\ \@andname\ \fi
\ifnum#1>1-\fi
\ifnum#1>0\@unitstring{#1}\fi
}
\newcommand*{\@@eightiesfrenchswiss}[1]{%
\@tenstring{8}%
\ifnum#1=1\ \@andname\ \fi
\ifnum#1>1-\fi
\ifnum#1>0\@unitstring{#1}\fi
}
\newcommand*{\@@ninetiesfrenchswiss}[1]{%
\@tenstring{9}%
\ifnum#1=1\ \@andname\ \fi
\ifnum#1>1-\fi
\ifnum#1>0\@unitstring{#1}\fi
}
\newcommand*{\@@Unitstringfrench}[1]{%
\ifcase#1 %
Z\'ero%
\or Un%
\or Deux%
\or Trois%
\or Quatre%
\or Cinq%
\or Six%
\or Sept%
\or Huit%
\or Neuf%
\fi
}
\newcommand*{\@@UnitstringFfrench}[1]{%
\ifnum#1=1%
  Une%
\else
  \@@Unitstringfrench{#1}%
\fi
}
\newcommand*{\@@Tenstringfrench}[1]{%
\ifcase#1 %
\or Dix%
\or Vingt%
\or Trente%
\or Quarante%
\or Cinquante%
\or Soixante%
\or Septante%
\or Huitante%
\or Nonante%
\or Cent%
\fi
}
\newcommand*{\@@Teenstringfrench}[1]{%
\ifcase#1 %
Dix%
\or Onze%
\or Douze%
\or Treize%
\or Quatorze%
\or Quinze%
\or Seize%
\or Dix-Sept%
\or Dix-Huit%
\or Dix-Neuf%
\fi
}
\DeclareRobustCommand{\@numberstringMfrenchswiss}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@numberstringMfrenchfrance}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@numberstringMfrenchbelgian}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\let\@numberstringMfrench=\@numberstringMfrenchfrance
\DeclareRobustCommand{\@numberstringFfrenchswiss}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringFfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@numberstringFfrenchfrance}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringFfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@numberstringFfrenchbelgian}[2]{%
\let\fc@case\fc@CaseIden
\let\@unitstring=\@@unitstringFfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{cent}\def\@thousand{mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\let\@numberstringFfrench=\@numberstringFfrenchfrance
\let\@ordinalstringNfrench\@ordinalstringMfrench
\DeclareRobustCommand{\@NumberstringMfrenchswiss}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@Unitstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@NumberstringMfrenchfrance}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@Unitstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@NumberstringMfrenchbelgian}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@Unitstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\let\@NumberstringMfrench=\@NumberstringMfrenchfrance
\DeclareRobustCommand{\@NumberstringFfrenchswiss}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@UnitstringFfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@NumberstringFfrenchfrance}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@UnitstringFfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\DeclareRobustCommand{\@NumberstringFfrenchbelgian}[2]{%
\let\fc@case\fc@UpperCaseFirstLetter
\let\@unitstring=\@@UnitstringFfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\def\@hundred{Cent}\def\@thousand{Mille}%
\def\@andname{et}%
\@@numberstringfrench{#1}{#2}}
\let\@NumberstringFfrench=\@NumberstringFfrenchfrance
\let\@NumberstringNfrench\@NumberstringMfrench
\DeclareRobustCommand{\@ordinalstringMfrenchswiss}[2]{%
\ifnum#1=1 %
\def#2{premier}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrenchswiss
\let\@ninetieths=\@@ninetiethsfrenchswiss
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@ordinalstringMfrenchfrance}[2]{%
\ifnum#1=1 %
\def#2{premier}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrench
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@teenstringfrench
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@ordinalstringMfrenchbelgian}[2]{%
\ifnum#1=1 %
\def#2{premier}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrenchswiss
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@teenstringfrench
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\let\@ordinalstringMfrench=\@ordinalstringMfrenchfrance
\DeclareRobustCommand{\@ordinalstringFfrenchswiss}[2]{%
\ifnum#1=1 %
\def#2{premi\`ere}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringFfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrenchswiss
\let\@ninetieths=\@@ninetiethsfrenchswiss
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@ordinalstringFfrenchfrance}[2]{%
\ifnum#1=1 %
\def#2{premi\`ere}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringFfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrench
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@teenstringfrench
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@ordinalstringFfrenchbelgian}[2]{%
\ifnum#1=1 %
\def#2{premi\`ere}%
\else
\let\@unitthstring=\@@unitthstringfrench
\let\@unitstring=\@@unitstringFfrench
\let\@teenthstring=\@@teenthstringfrench
\let\@teenstring=\@@teenstringfrench
\let\@tenthstring=\@@tenthstringfrench
\let\@tenstring=\@@tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@teenstringfrench
\def\@hundredth{centi\`eme}\def\@hundred{cent}%
\def\@thousandth{mili\`eme}\def\@thousand{mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\let\@ordinalstringFfrench=\@ordinalstringFfrenchfrance
\let\@ordinalstringNfrench\@ordinalstringMfrench
\DeclareRobustCommand{\@OrdinalstringMfrenchswiss}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@Unitstringfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrenchswiss
\let\@ninetieths=\@@ninetiethsfrenchswiss
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@OrdinalstringMfrenchfrance}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@Unitstringfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrench
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@Teenstringfrench
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@OrdinalstringMfrenchbelgian}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@Unitstringfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@Teenstringfrench
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\let\@OrdinalstringMfrench=\@OrdinalstringMfrenchfrance
\DeclareRobustCommand{\@OrdinalstringFfrenchswiss}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@UnitstringFfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrenchswiss
\let\@ninetieths=\@@ninetiethsfrenchswiss
\let\@seventies=\@@seventiesfrenchswiss
\let\@eighties=\@@eightiesfrenchswiss
\let\@nineties=\@@ninetiesfrenchswiss
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@OrdinalstringFfrenchfrance}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@UnitstringFfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrench
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@Teenstringfrench
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\DeclareRobustCommand{\@OrdinalstringFfrenchbelgian}[2]{%
\ifnum#1=1 %
\def#2{Premi\`ere}%
\else
\let\@unitthstring=\@@Unitthstringfrench
\let\@unitstring=\@@UnitstringFfrench
\let\@teenthstring=\@@Teenthstringfrench
\let\@teenstring=\@@Teenstringfrench
\let\@tenthstring=\@@Tenthstringfrench
\let\@tenstring=\@@Tenstringfrench
\let\@seventieths=\@@seventiethsfrenchswiss
\let\@eightieths=\@@eightiethsfrench
\let\@ninetieths=\@@ninetiethsfrench
\let\@seventies=\@@seventiesfrench
\let\@eighties=\@@eightiesfrench
\let\@nineties=\@@ninetiesfrench
\let\@teenstring=\@@Teenstringfrench
\def\@hundredth{Centi\`eme}\def\@hundred{Cent}%
\def\@thousandth{Mili\`eme}\def\@thousand{Mille}%
\def\@andname{et}%
\@@ordinalstringfrench{#1}{#2}%
\fi}
\let\@OrdinalstringFfrench=\@OrdinalstringFfrenchfrance
\let\@OrdinalstringNfrench\@OrdinalstringMfrench
\newcommand*{\@@unitthstringfrench}[1]{%
\ifcase#1 %
    z\'ero%
\or uni\`eme%
\or deuxi\`eme%
\or troisi\`eme%
\or quatri\`eme%
\or cinqui\`eme%
\or sixi\`eme%
\or septi\`eme%
\or huiti\`eme%
\or neuvi\`eme%
\fi
}
\newcommand*{\@@tenthstringfrench}[1]{%
\ifcase#1 %
\or dixi\`eme%
\or vingti\`eme%
\or trenti\`eme%
\or quaranti\`eme%
\or cinquanti\`eme%
\or soixanti\`eme%
\or septenti\`eme%
\or huitanti\`eme%
\or nonenti\`eme%
\fi
}
\newcommand*{\@@teenthstringfrench}[1]{%
\ifcase#1 %
dixi\`eme%
\or onzi\`eme%
\or douzi\`eme%
\or treizi\`eme%
\or quatorzi\`eme%
\or quinzi\`eme%
\or seizi\`eme%
\or dix-septi\`eme%
\or dix-huiti\`eme%
\or dix-neuvi\`eme%
\fi
}
\newcommand*{\@@seventiethsfrenchswiss}[1]{%
\ifcase#1 %
  \@tenthstring{7}%
\or
  \@tenstring{7} \@andname\ \@unitthstring{1}%
\else
  \@tenstring{7}-\@unitthstring{#1}%
\fi
}
\newcommand*{\@@eightiethsfrenchswiss}[1]{%
\ifcase#1 %
\@tenthstring{8}%
\or
\@tenstring{8} \@andname\ \@unitthstring{1}%
\else
\@tenstring{8}-\@unitthstring{#1}%
\fi}
\newcommand*{\@@ninetiethsfrenchswiss}[1]{%
\ifcase#1 %
\@tenthstring{9}%
\or
\@tenstring{9} \@andname\ \@unitthstring{1}%
\else
\@tenstring{9}-\@unitthstring{#1}%
\fi}
\newcommand*{\@@seventiethsfrench}[1]{%
\ifnum#1=0 %
\@tenstring{6}%
-%
\else
\@tenstring{6}%
\ \@andname\
\fi
\@teenthstring{#1}%
}
\newcommand*{\@@eightiethsfrench}[1]{%
\ifnum#1>0 %
\@unitstring{4}-\@tenstring{2}%
-\@unitthstring{#1}%
\else
\@unitstring{4}-\@tenthstring{2}%
\fi
}
\newcommand*{\@@ninetiethsfrench}[1]{%
\@unitstring{4}-\@tenstring{2}-\@teenthstring{#1}%
}
\newcommand*{\@@Unitthstringfrench}[1]{%
\ifcase#1 %
    Z\'ero%
\or Uni\`eme%
\or Deuxi\`eme%
\or Troisi\`eme%
\or Quatri\`eme%
\or Cinqui\`eme%
\or Sixi\`eme%
\or Septi\`eme%
\or Huiti\`eme%
\or Neuvi\`eme%
\fi
}
\newcommand*{\@@Tenthstringfrench}[1]{%
\ifcase#1 %
\or Dixi\`eme%
\or Vingti\`eme%
\or Trenti\`eme%
\or Quaranti\`eme%
\or Cinquanti\`eme%
\or Soixanti\`eme%
\or Septenti\`eme%
\or Huitanti\`eme%
\or Nonenti\`eme%
\fi
}
\newcommand*{\@@Teenthstringfrench}[1]{%
\ifcase#1 %
Dixi\`eme%
\or Onzi\`eme%
\or Douzi\`eme%
\or Treizi\`eme%
\or Quatorzi\`eme%
\or Quinzi\`eme%
\or Seizi\`eme%
\or Dix-Septi\`eme%
\or Dix-Huiti\`eme%
\or Dix-Neuvi\`eme%
\fi
}


\@ifundefined{fc@@poweroften@longscalefrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `fc@@poweroften@longscalefrench'}}

% arg #1 = counter giving the weight, this is expected to be multiple of 3
% arg #2 = let n be the number of such power of ten we have, then #2 is 0 if n=0, 1 if n=1, or >1 if n>1
% arg #3 = macro string number representing how many such power of ten we have
% arg #4 = macro into which to append the result
\def\fc@@poweroften@longscalefrench#1#2#3#4{%
  {% First save argument into locals
    \edef\@@tempa{\number#1}%
    \edef\@@tempb{\number#2}%
    \let\@@tempc#3%
    \let\@tempd#4%
    \let\@tempa\@@tempa
    \let\@tempb\@@tempb
    \let\@tempc\@@tempc
    % now do the job
    \count0=\@tempa
    \count1=\@tempb
    \count2\count0 %
    \divide\count2 by 6 %
    \count3\count2 %
    \multiply\count3 by 6 %
    \count3-\count3 %
    \advance\count3 by \count0 %
    % This \@temph macro is just to propagate the result after the 
    \ifnum\count0>0 % If weight>=3, i.e we do have to append thousand or n-illion(s)/n-illiard(s)
      \ifnum\count1>0 % we have at least one thousand/n-illion/n-illiard
         % t if thousand, o if other
         \edef\@temph{%
            \ifnum\count2=0 % weight=3
               t%
            \else
               \ifnum\count3>2 % power of the form 10^(6*n+r) with 3 =< r < 6
                  \ifnum\fc@longscale@milliard@threshold=0 %
                     o% always use the n-illiard notation
                  \else
                    % use the n-illiard below some threshold
                    \ifnum\count2>\fc@longscale@milliard@threshold
                      t%
                    \else
                      o%
                    \fi
                  \fi
               \else
                 o%
               \fi
            \fi
          }%
         \expandafter\if\@temph t%
           % in case that the group of digit is =1 we, the French, do not say ``un mille'', but just mille
           % so \@tempc which is ``un'' in  that case is set to empty
           \ifnum\count1=1 %
             \let\@tempc\@empty
           \fi
           \let\@tempe\@thousand
         \else
           % weight >= 6
           \expandafter\fc@@latin@cardinal@pefix\expandafter{\the\count2}\@tempg
           % now form the xxx-illion(s) or xxx-illiard(s) word
           \edef\@tempe{%
             \@tempg
             \ifnum\count3>2 %
               illiard%
             \else
               illion%
             \fi
             \ifnum\count1>1 %
             s%
             \fi
           }%
         \fi
         % Now append into \@tempc the power of ten
         \let\@tempf\@tempc
         \edef\@tempc{%
           % passed as #4
           \ifx\@tempf\@empty\else
             \@tempf
             \fc@frenchoptions@supermillion@dos
           \fi
           % m, b and so on
           \expandafter\fc@case\@tempe\@nil
         }%
      \fi
    \fi
    % \@tempa <- expansion of \@tempd (passed as #4) followed by expansion of \@tempc
    % which is the string number for the considered 3 digit group
    \edef\@tempa{%
      \@tempd
      \ifx\@tempd\@empty\else
         \ifx\@tempc\@empty\else
           \fc@frenchoptions@supermillion@dos
         \fi
      \fi
      \@tempc
    }%
    % now place into \@tempa the redefintion
    % of #3 for further propagation after closing group
    \def\@tempb##1{\def\@tempa{\def#4{##1}}}%
    \expandafter\@tempb\expandafter{\@tempa}%
    \expandafter
  }\@tempa
}

\@ifundefined{fc@@poweroften@shortscalefrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `fc@@poweroften@shortscalefrench'}}

% arg #1 = counter giving the weight, this is expected to be multiple of 3
% arg #2 = 0, 1 or 2, depending of how many such power of ten we have.
% arg #3 = macro string number representing how many such power of ten we have
% arg #4 = macro into which to addup the result
\def\fc@@poweroften@shortscalefrench#1#2#3#4{%
  {% First save argument into locals
    \edef\@@tempa{\number#1}%
    \edef\@@tempb{\number#2}%
    \let\@@tempc#3%
    \let\@tempd#4%
    \let\@tempa\@@tempa
    \let\@tempb\@@tempb
    \let\@tempc\@@tempc
    % now do the job
    \count0=\@tempa
    \count1=\@tempb
    \count2\count0 %
    \divide\count2 by 3 %
    \advance\count2 by -1 %
    % This \@temph macro is just to propagate the result after the 
    \ifnum\count0>0 % If weight>=3, i.e we do have to append thousand or n-illion(s)/n-illiard(s)
      \ifnum\count1>0 % we have at least one thousand/n-illion/n-illiard
         \ifnum\count2=0 %
           % in case that the group of digit is =1 we, the French, do not say ``un mille'', but just mille
           % so \@tempc which is ``un'' in  that case is set to empty
           \ifnum\count1=1 %
             \let\@tempc\@empty
           \fi
           \let\@tempe\@thousand
         \else
           % weight >= 6
           \expandafter\fc@@latin@cardinal@pefix\expandafter{\the\count2}\@tempg
           % now form the xxx-illion(s) or xxx-illiard(s) word
           \edef\@tempe{%
             \@tempg
             illion%
             \ifnum\count1>1 %
             s%
             \fi
           }%
         \fi
         % Now append into \@tempc the power of ten
         \let\@tempf\@tempc
         \edef\@tempc{%
           % passed as #4
           \ifx\@tempf\@empty\else
             \@tempf
             \fc@frenchoptions@submillion@dos
           \fi
           % m, b and so on
           \expandafter\fc@case\@tempe\@nil
         }%
      \fi
    \fi
    % \@tempa <- expansion of \@tempd (passed as #4) followed by expansion of \@tempc
    % which is the string number for the considered 3 digit group
    \edef\@tempa{%
      \@tempd
      \ifx\@tempd\@empty\else
         \ifx\@tempc\@empty\else
           \fc@frenchoptions@supermillion@dos
         \fi
      \fi
      \@tempc
    }%
    % now place into \@tempa the redefintion
    % of #3 for further propagation after closing group
    \def\@tempb##1{\def\@tempa{\def#4{##1}}}%
    \expandafter\@tempb\expandafter{\@tempa}%
    \expandafter
  }\@tempa
}


\@ifundefined{fc@@poweroften@recursivefrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `fc@@poweroften@recursivefrench'}}

% arg #1 = counter giving the weight, this is expected to be multiple of 3
% arg #2 = 0, 1 or 2, depending of how many such power of ten we have.
% arg #3 = macro string number representing how many such power of ten we have
% arg #4 = macro into which to addup the result
\def\fc@@poweroften@recursivefrench#1#2#3#4{%
  {% First save argument into locals
    \edef\@@tempa{\number#1}%
    \edef\@@tempb{\number#2}%
    \let\@@tempc#3%
    \let\@tempd#4%
    \let\@tempa\@@tempa
    \let\@tempb\@@tempb
    \let\@tempc\@@tempc
    % now do the job
    \count0=\@tempa
    \count1=\@tempb
    \count2\count0 %
    \divide\count2 by 9 %
    \advance\count2 by -1 %
    \let\@tempe\@empty
    \edef\@tempf{ de \fc@case milliards\@nil}%
    \ifnum\count2>0 %
      \count3\count2 %
      \count3-\count3 %
      \multiply\count3 by 9 %
      \advance\count0 by \count3 %
      \loop
         % (\count2, \count3) <- (\count2 div 2, \count2 mod 2)
         \count3\count2
         \divide\count3 by 2 %
         \multiply\count3 by 2 %
         \count3-\count3 %
         \advance\count3 by \count2 %
         \divide\count2 by 2 %
         \ifnum\count3=1 %
           \let\@tempg\@tempe
           \edef\@tempe{\@tempg\@tempf}%
         \fi
         \let\@tempg\@tempf
         \edef\@tempf{\@tempg\@tempg}%
         \ifnum\count2>0 %
      \repeat
    \fi
    \divide\count0 by 3 %
    % in case that the group of digit is =1 we, the French, do not say ``un mille'', but just mille
    % so \@tempc which is ``un'' in  that case is set to empty
    \ifnum\count1=1 %
      \expandafter\let\expandafter\@tempc
      \ifcase\count0 % 0 .. 5
        % 0
        \@tempc
      \or  % 1 => mille
        \@empty
      \or % 2
        \@tempc
      \or % 3
        \@tempc
      \or % 4 => mille milliards
        \@empty
      \else
        \@tempc
      \fi
    \fi
    \edef\@tempg{%
      \ifcase\count0 % 0 .. 5
      \or
        mille% 1
      \or
        million\ifnum\count1>1 s\fi % 2
      \or
        milliard\ifnum\count1>1 s\fi % 3
      \or
        mille\noexpand\@nil\ \noexpand\fc@case milliards% 4
      \or
        million\ifnum\count1>1 s\fi\noexpand\@nil\ de \noexpand\fc@case  milliards% 5
      \fi
      }%
    % \@tempa <- expansion of \@tempd (passed as #4) followed by expansion of \@tempc
    % which is the string number for the considered 3 digit group
    % followed by the concerned power of ten
    \edef\@tempa{%
      \@tempd
      \ifx\@tempd\@empty\else
         \ifx\@tempc\@empty\else
           \fc@frenchoptions@supermillion@dos
         \fi
      \fi
      \@tempc
      \ifx\@tempg\@empty\else
         \ifx\@tempc\@empty\else
           \fc@frenchoptions@supermillion@dos
         \fi
      \fi
      \ifnum\count1>0 %
         \expandafter\fc@case\@tempg\@nil
         \@tempe
      \fi
    }%
    \def\@tempb##1{\def\@tempa{\def#4{##1}}}%
    \expandafter\@tempb\expandafter{\@tempa}%
    \expandafter
  }\@tempa
}




\@ifundefined{fc@lthundredstringfrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `fc@lthundredstringfrench'}}


% Format a number in 0..99
% Empty output for 0
% arg #1 = input wheight
% arg #2 = intput/output macro
% The formatted number is concatenated after the content of #2, and the result
% is placed into #2
\def\fc@lthundredstringfrench#1#2{%
  {%
    % first save arguments into local temporary macro/counters
    \let\@tempc#2%
    \count2=#1 %
    % \count0 <- unit
    \fc@read@unit{\count0}{\count2}%
    % \count1 <- tens
    \advance\count2 by 1 %
    \fc@read@unit{\count1}{\count2}%
    % \@tempa <- #2 followed by hundred string
    \edef\@tempa{%
      \@tempc
      \ifnum\count1>1 %
        % 20 .. 99
        \ifnum\count1>6 %
          % 70 .. 99
          \ifnum\count1<8 %
             % 70 .. 79
             \@seventies{\count0}%
          \else
            % 80..99
            \ifnum\count1<9 %
              % 80 .. 89
              \@eighties{\count0}%
            \else
              % 90 .. 99
              \@nineties{\count0}%
            \fi
          \fi
        \else
          % 20..69
          \@tenstring{\count1}%
          \ifnum\count0>0 %
             % x1 .. x0
             \ifnum\count0=1 %
               % x1
               \fc@frenchoptions@submillion@dos\@andname\fc@frenchoptions@submillion@dos
             \else
               % x2 .. x9
               -%
             \fi
             \@unitstring{\count0}%
          \fi
        \fi
      \else
        % 0 .. 19
        \ifnum\count1=0 % when tens = 0
          % 0 .. 9
          \ifnum\count0=0 % when units = 0
            % \count2=1 when #1 = 0, i.e. only for the unit of the top level number
            \ifnum\count2=1 %
              \ifnum\fc@max@weight=0 %
                \@unitstring{0}%
              \fi
            \fi
          \else
            % 1 .. 9
            \@unitstring{\count0}%
          \fi
        \else
          % 10 .. 19
          \@teenstring{\count0}%
        \fi
      \fi
    }%
    % #2 <- \@tempa expansion after closing brace
    \def\@tempb##1{\def\@tempa{\def#2{##1}}}%
    \expandafter\@tempb\expandafter{\@tempa}%
    \expandafter
  }\@tempa
}


\@ifundefined{fc@ltthousandstringfrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `fc@ltthousandstringfrench'}}

% Format a number in 0..999
% Empty output for 0
% arg #1 = input weight
% arg #2 = output macro
% The formatted number is placed into macro #2
\def\fc@ltthousandstringfrench#1#2{%
  {%
    % first save arguments into local temporary macro/counters
    % \count2 <- #1
    \edef\@tempd{\number#1}%
    \count2=\@tempd
    % \count0 <- hundreds
    \count4\count2
    \advance\count4 by 2 %
    \fc@read@unit{\count0}{\count4}%
    % check the two subsequent digits be non zero, check-result into \@tempa
    \advance\count4 by -1 %
    \count3\count4 %
    \advance\count3 by -1 %
    \fc@check@nonzeros{\count3}{\count4}\@tempa
    % compute s after `cent' into \@temps
    \edef\@temps{%
      \ifcase\fc@frenchoptions@s@of@cent
      \or
        \ifnum\count0>1s\fi
      \or
        \ifnum\count0>1 \ifnum\@tempa=0s\fi\fi
      \fi
    }%
    % compute spacing after cent(s?) into \@tempb
    \expandafter\let\expandafter\@tempb
       \ifnum\@tempa>0 \fc@frenchoptions@submillion@dos\else\@empty\fi
    % now place into \@tempa the hundreds
    \edef\@tempa{%
       \ifnum\count0=0 %
       \else
         \ifnum\count0=1 %
           \@hundred
         \else
           \@unitstring{\count0}\fc@frenchoptions@submillion@dos\@hundred\@temps
         \fi
         \@tempb
       \fi
    }%
    % now append to \@tempa the ten and unit
    \fc@lthundredstringfrench{\count2}\@tempa
    % propagate after closing brace #2 <- \@tempa expansion 
    \def\@tempb##1{\def\@tempa{\def#2{##1}}}%
    \expandafter\@tempb\expandafter{\@tempa}%
    \expandafter
  }\@tempa
}

\@ifundefined{@@numberstringfrench}{}{%
  \PackageError{fmtcount}{Duplicate definition}{Redefinition of macro `@@numberstringfrench'}}

% arg #1 = number to convert to string
% arg #2 = macro into which to place the result
\def\@@numberstringfrench#1#2{%
  \edef\@tempa{#1}%
  \expandafter\fc@number@parser\expandafter{\@tempa}%
  \ifnum\fc@min@weight<0 %
     \PackageError{fmtcount}{Out of range}%
        {This macro does not work with fractional numbers}%
  \fi
  % use \count0 rather than directly \fc@sign@case, so that when \fc@sign@case expands to `0', then \@tempb is
  % defined to `' (i.e. empty) rather than to `\relax '.
  \count0=\fc@sign@case
  \edef\@tempb{\ifcase\count0 \or plus \or moins \fi}%
  {%
    % accumulate
    \count0=\fc@max@weight
    \divide\count0 by 3 %
    \multiply\count0 by 3 %
    \loop
       \fc@ltthousandstringfrench{\count0}\@tempa
       \count1\count0 %
       \advance\count1 by 2 %
       \fc@check@nonzeros{\count0}{\count1}\@tempt
       \fc@poweroften{\count0}\@tempt\@tempa\@tempb
       \advance\count0 by -3 %
       \ifnum\count0>-3 %
    \repeat
    % propagate the result into macro #2 after closing group
    \def\@tempc##1{\def\@tempa{\def#2{##1}}}%
    \expandafter\@tempc\expandafter{\@tempb}%
    \expandafter
  }\@tempa
}
\newcommand*{\@@ordinalstringfrench}[2]{%
\ifnum#1>99999
\PackageError{fmtcount}{Out of range}%
{This macro only works for values less than 100000}%
\else
\ifnum#1<0
\PackageError{fmtcount}{Negative numbers not permitted}%
{This macro does not work for negative numbers, however
you can try typing "minus" first, and then pass the modulus of
this number}%
\fi
\fi
\def#2{}%
\@strctr=#1\relax \divide\@strctr by 1000\relax
\ifnum\@strctr>9
  \@tmpstrctr=\@strctr
  \divide\@strctr by 10\relax
  \ifnum\@strctr>1\relax
    \ifthenelse{\@strctr>6}{%
      \@modulo{\@tmpstrctr}{10}%
      \ifnum\@strctr=7\relax
        \let\@@fc@ordstr#2\relax
        \edef#2{\@@fc@ordstr\@seventies{\@tmpstrctr}}%
      \else
        \ifnum\@strctr=8\relax
          \let\@@fc@ordstr#2\relax
          \edef#2{\@@fc@ordstr\@eighties{\@tmpstrctr}}%
        \else
          \let\@@fc@ordstr#2\relax
          \edef#2{\@@fc@ordstr\@nineties{\@tmpstrctr}}%
        \fi
      \fi
    }{%
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\@tenstring{\@strctr}}%
      \@strctr=#1\relax
      \divide\@strctr by 1000\relax
      \@modulo{\@strctr}{10}%
      \ifnum\@strctr=1 %
         \let\@@fc@ordstr#2\relax
         \edef#2{\@@fc@ordstr\ \@andname}%
      \fi
      \ifnum\@strctr>0\relax
         \let\@@fc@ordstr#2\relax
         \edef#2{\@@fc@ordstr\ \@unitstring{\@strctr}}%
      \fi
    }%
  \else
    \@strctr=#1\relax
    \divide\@strctr by 1000\relax
    \@modulo{\@strctr}{10}%
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\@teenstring{\@strctr}}%
  \fi
  \@strctr=#1\relax \@modulo{\@strctr}{1000}%
  \ifnum\@strctr=0 %
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\ \@thousandth}%
  \else
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\ \@thousand}%
  \fi
\else
  \ifnum\@strctr>0\relax
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\@unitstring{\@strctr}}%
    \@strctr=#1\relax \@modulo{\@strctr}{1000}%
    \ifnum\@strctr=0 %
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\ \@thousandth}%
    \else
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\ \@thousand}%
    \fi
  \fi
\fi
\@strctr=#1\relax \@modulo{\@strctr}{1000}%
\divide\@strctr by 100\relax
\ifnum\@strctr>0\relax
  \ifnum#1>1000\relax
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\ }%
  \fi
  \let\@@fc@ordstr#2\relax
  \edef#2{\@@fc@ordstr\@unitstring{\@strctr}}%
  \@strctr=#1\relax \@modulo{\@strctr}{100}%
  \let\@@fc@ordstr#2\relax
  \ifnum\@strctr=0 %
    \edef#2{\@@fc@ordstr\ \@hundredth}%
  \else
    \edef#2{\@@fc@ordstr\ \@hundred}%
  \fi
\fi
\@tmpstrctr=\@strctr
\@strctr=#1\relax \@modulo{\@strctr}{100}%
\ifnum#1>100\relax
  \ifnum\@strctr>0\relax
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\ \@andname\ }%
  \fi
\fi
\ifnum\@strctr>19\relax
  \@tmpstrctr=\@strctr
  \divide\@strctr by 10\relax
  \@modulo{\@tmpstrctr}{10}%
  \ifthenelse{\@strctr>6}{%
    \ifnum\@strctr=7\relax
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\@seventieths{\@tmpstrctr}}%
    \else
      \ifnum\@strctr=8\relax
        \let\@@fc@ordstr#2\relax
        \edef#2{\@@fc@ordstr\@eightieths{\@tmpstrctr}}%
      \else
        \let\@@fc@ordstr#2\relax
        \edef#2{\@@fc@ordstr\@ninetieths{\@tmpstrctr}}%
      \fi
    \fi
  }{%
    \ifnum\@tmpstrctr=0 %
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\@tenthstring{\@strctr}}%
    \else
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\@tenstring{\@strctr}}%
    \fi
    \@strctr=#1\relax \@modulo{\@strctr}{10}%
    \ifnum\@strctr=1 %
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\ \@andname}%
    \fi
    \ifnum\@strctr>0\relax
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\ \@unitthstring{\@strctr}}%
    \fi
  }%
\else
  \ifnum\@strctr<10 %
    \ifnum\@strctr=0 %
      \ifnum#1<100\relax
        \let\@@fc@ordstr#2\relax
        \edef#2{\@@fc@ordstr\@unitthstring{\@strctr}}%
      \fi
    \else
      \let\@@fc@ordstr#2\relax
      \edef#2{\@@fc@ordstr\@unitthstring{\@strctr}}%
    \fi
  \else
    \@modulo{\@strctr}{10}%
    \let\@@fc@ordstr#2\relax
    \edef#2{\@@fc@ordstr\@teenthstring{\@strctr}}%
  \fi
\fi
}

\def\fc@frenchoptions@setdefaults{%
  % 0=never s after cent
  % 1=place s after cent conditionally to having 2..9 hundreds
  % 2=same as 1, but no s if a ten or unit after hundreds is non zero
  \def\fc@frenchoptions@s@of@cent{2}%
  \let\fc@frenchoptions@submillion@dos\space%
  \let\fc@frenchoptions@supermillion@dos\space%
  \let\fc@u@in@duo\@empty% Could be `u'
%  \let\fc@poweroften\fc@@poweroften@longscalefrench
  \let\fc@poweroften\fc@@poweroften@recursivefrench
  \def\fc@longscale@milliard@threshold{0}%
}
\fc@frenchoptions@setdefaults

\endinput
%%
%% End of file `fc-french.def'.
