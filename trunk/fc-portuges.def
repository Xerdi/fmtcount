% \subsubsection{fc-portuges.def}
% Portuguese definitions
%    \begin{macrocode}
\ProvidesFCLanguage{portuges}[2016/01/12]%
%    \end{macrocode}
% Define macro that converts a number or count register (first
% argument) to an ordinal, and stores the result in the second
% argument, which should be a control sequence. Masculine:
%    \begin{macrocode}
\newcommand*\@ordinalMportuges[2]{%
  \ifnum#1=0\relax
    \edef#2{\number#1}%
  \else
    \edef#2{\number#1\relax\noexpand\fmtord{o}}%
  \fi
}%
\global\let\@ordinalMportuges\@ordinalMportuges
%    \end{macrocode}
% Feminine:
%    \begin{macrocode}
\newcommand*\@ordinalFportuges[2]{%
  \ifnum#1=0\relax
    \edef#2{\number#1}%
  \else
    \edef#2{\number#1\relax\noexpand\fmtord{a}}%
  \fi
}%
\global\let\@ordinalFportuges\@ordinalFportuges
%    \end{macrocode}
% Make neuter same as masculine:
%    \begin{macrocode}
\global\let\@ordinalNportuges\@ordinalMportuges
%    \end{macrocode}
% Convert a number to a textual representation. To make it easier,
% split it up into units, tens, teens and hundreds. Units (argument
% must
% be a number from 0 to 9):
%\changes{2.04}{2014-06-09}{Fixed bug that had incorrect number of
%parameters specified}
%    \begin{macrocode}
\newcommand*\@@unitstringportuges[1]{%
  \ifcase#1\relax
    zero%
    \or um%
    \or dois%
    \or tr\^es%
    \or quatro%
    \or cinco%
    \or seis%
    \or sete%
    \or oito%
    \or nove%
  \fi
}%
\global\let\@@unitstringportuges\@@unitstringportuges
%   \end{macrocode}
% As above, but for feminine:
%   \begin{macrocode}
\newcommand*\@@unitstringFportuges[1]{%
  \ifcase#1\relax
    zero%
    \or uma%
    \or duas%
    \or tr\^es%
    \or quatro%
    \or cinco%
    \or seis%
    \or sete%
    \or oito%
    \or nove%
  \fi
}%
\global\let\@@unitstringFportuges\@@unitstringFportuges
%    \end{macrocode}
% Tens (argument must be a number from 0 to 10):
%    \begin{macrocode}
\newcommand*\@@tenstringportuges[1]{%
  \ifcase#1\relax
    \or dez%
    \or vinte%
    \or trinta%
    \or quarenta%
    \or cinq\"uenta%
    \or sessenta%
    \or setenta%
    \or oitenta%
    \or noventa%
    \or cem%
  \fi
}%
\global\let\@@tenstringportuges\@@tenstringportuges
%    \end{macrocode}
% Teens (argument must be a number from 0 to 9):
%    \begin{macrocode}
\newcommand*\@@teenstringportuges[1]{%
  \ifcase#1\relax
    dez%
    \or onze%
    \or doze%
    \or treze%
    \or catorze%
    \or quinze%
    \or dezasseis%
    \or dezassete%
    \or dezoito%
    \or dezanove%
  \fi
}%
\global\let\@@teenstringportuges\@@teenstringportuges
%    \end{macrocode}
% Hundreds:
%    \begin{macrocode}
\newcommand*\@@hundredstringportuges[1]{%
  \ifcase#1\relax
    \or cento%
    \or duzentos%
    \or trezentos%
    \or quatrocentos%
    \or quinhentos%
    \or seiscentos%
    \or setecentos%
    \or oitocentos%
    \or novecentos%
  \fi
}%
\global\let\@@hundredstringportuges\@@hundredstringportuges
%    \end{macrocode}
% Hundreds (feminine):
%    \begin{macrocode}
\newcommand*\@@hundredstringFportuges[1]{%
  \ifcase#1\relax
    \or cento%
    \or duzentas%
    \or trezentas%
    \or quatrocentas%
    \or quinhentas%
    \or seiscentas%
    \or setecentas%
    \or oitocentas%
    \or novecentas%
  \fi
}%
\global\let\@@hundredstringFportuges\@@hundredstringFportuges
%    \end{macrocode}
% Units (initial letter in upper case):
%    \begin{macrocode}
\newcommand*\@@Unitstringportuges[1]{%
  \ifcase#1\relax
    Zero%
    \or Um%
    \or Dois%
    \or Tr\^es%
    \or Quatro%
    \or Cinco%
    \or Seis%
    \or Sete%
    \or Oito%
    \or Nove%
  \fi
}%
\global\let\@@Unitstringportuges\@@Unitstringportuges
%    \end{macrocode}
% As above, but feminine:
%    \begin{macrocode}
\newcommand*\@@UnitstringFportuges[1]{%
  \ifcase#1\relax
    Zera%
    \or Uma%
    \or Duas%
    \or Tr\^es%
    \or Quatro%
    \or Cinco%
    \or Seis%
    \or Sete%
    \or Oito%
    \or Nove%
  \fi
}%
\global\let\@@UnitstringFportuges\@@UnitstringFportuges
%    \end{macrocode}
% Tens (with initial letter in upper case):
%    \begin{macrocode}
\newcommand*\@@Tenstringportuges[1]{%
  \ifcase#1\relax
    \or Dez%
    \or Vinte%
    \or Trinta%
    \or Quarenta%
    \or Cinq\"uenta%
    \or Sessenta%
    \or Setenta%
    \or Oitenta%
    \or Noventa%
    \or Cem%
  \fi
}%
\global\let\@@Tenstringportuges\@@Tenstringportuges
%    \end{macrocode}
% Teens (with initial letter in upper case):
%    \begin{macrocode}
\newcommand*\@@Teenstringportuges[1]{%
  \ifcase#1\relax
    Dez%
    \or Onze%
    \or Doze%
    \or Treze%
    \or Catorze%
    \or Quinze%
    \or Dezasseis%
    \or Dezassete%
    \or Dezoito%
    \or Dezanove%
  \fi
}%
\global\let\@@Teenstringportuges\@@Teenstringportuges
%    \end{macrocode}
% Hundreds (with initial letter in upper case):
%    \begin{macrocode}
\newcommand*\@@Hundredstringportuges[1]{%
  \ifcase#1\relax
    \or Cento%
    \or Duzentos%
    \or Trezentos%
    \or Quatrocentos%
    \or Quinhentos%
    \or Seiscentos%
    \or Setecentos%
    \or Oitocentos%
    \or Novecentos%
  \fi
}%
\global\let\@@Hundredstringportuges\@@Hundredstringportuges
%    \end{macrocode}
% As above, but feminine:
%    \begin{macrocode}
\newcommand*\@@HundredstringFportuges[1]{%
  \ifcase#1\relax
    \or Cento%
    \or Duzentas%
    \or Trezentas%
    \or Quatrocentas%
    \or Quinhentas%
    \or Seiscentas%
    \or Setecentas%
    \or Oitocentas%
    \or Novecentas%
  \fi
}%
\global\let\@@HundredstringFportuges\@@HundredstringFportuges
%    \end{macrocode}
% This has changed in version 1.08, so that it now stores
% the result in the second argument, but doesn't display
% anything. Since it only affects internal macros, it shouldn't
% affect documents created with older versions. (These internal
% macros are not meant for use in documents.)
% \changes{3.02}{2016/01/12}{Replace \cs{DeclareRobustCommand} by
% \cs{newcommand*} as robustness is handled now at top level in
% \texttt{fmtcount.sty}, and we don't need \cs{long} macros. Concerned macros
% are \cs{@numberstringMportuges}, \cs{@numberstringFportuges},
% \cs{@NumberstringMportuges}, \cs{@NumberstringFportuges},
% \cs{@ordinalstringMportuges}, \cs{@ordinalstringFportuges},
% \cs{@OrdinalstringMportuges}, and \cs{@OrdinalstringFportuges}.}
% \changes{3.03}{2017/07/21}{Fix bug
% \#\href{https://github.com/nlct/fmtcount/issues/25}{25}.}
%    \begin{macrocode}
\newcommand*{\@numberstringMportuges}[2]{%
  \let\@unitstring=\@@unitstringportuges
  \let\@teenstring=\@@teenstringportuges
  \let\@tenstring=\@@tenstringportuges
  \let\@hundredstring=\@@hundredstringportuges
  \def\@hundred{cem}\def\@thousand{mil}%
  \def\@andname{e}%
  \@@numberstringportuges{#1}{#2}%
}%
\global\let\@numberstringMportuges\@numberstringMportuges
%    \end{macrocode}
% As above, but feminine form:
%    \begin{macrocode}
\newcommand*{\@numberstringFportuges}[2]{%
  \let\@unitstring=\@@unitstringFportuges
  \let\@teenstring=\@@teenstringportuges
  \let\@tenstring=\@@tenstringportuges
  \let\@hundredstring=\@@hundredstringFportuges
  \def\@hundred{cem}\def\@thousand{mil}%
  \def\@andname{e}%
  \@@numberstringportuges{#1}{#2}%
}%
\global\let\@numberstringFportuges\@numberstringFportuges
%    \end{macrocode}
% Make neuter same as masculine:
%    \begin{macrocode}
\global\let\@numberstringNportuges\@numberstringMportuges
%    \end{macrocode}
% As above, but initial letters in upper case:
%    \begin{macrocode}
\newcommand*{\@NumberstringMportuges}[2]{%
  \let\@unitstring=\@@Unitstringportuges
  \let\@teenstring=\@@Teenstringportuges
  \let\@tenstring=\@@Tenstringportuges
  \let\@hundredstring=\@@Hundredstringportuges
  \def\@hundred{Cem}\def\@thousand{Mil}%
  \def\@andname{e}%
  \@@numberstringportuges{#1}{#2}%
}%
\global\let\@NumberstringMportuges\@NumberstringMportuges
%    \end{macrocode}
% As above, but feminine form:
%    \begin{macrocode}
\newcommand*{\@NumberstringFportuges}[2]{%
  \let\@unitstring=\@@UnitstringFportuges
  \let\@teenstring=\@@Teenstringportuges
  \let\@tenstring=\@@Tenstringportuges
  \let\@hundredstring=\@@HundredstringFportuges
  \def\@hundred{Cem}\def\@thousand{Mil}%
  \def\@andname{e}%
  \@@numberstringportuges{#1}{#2}%
}%
\global\let\@NumberstringFportuges\@NumberstringFportuges
%    \end{macrocode}
% Make neuter same as masculine:
%    \begin{macrocode}
\global\let\@NumberstringNportuges\@NumberstringMportuges
%    \end{macrocode}
% As above, but for ordinals.
%    \begin{macrocode}
\newcommand*{\@ordinalstringMportuges}[2]{%
  \let\@unitthstring=\@@unitthstringportuges
  \let\@unitstring=\@@unitstringportuges
  \let\@teenthstring=\@@teenthstringportuges
  \let\@tenthstring=\@@tenthstringportuges
  \let\@hundredthstring=\@@hundredthstringportuges
  \def\@thousandth{mil\'esimo}%
  \@@ordinalstringportuges{#1}{#2}%
}%
\global\let\@ordinalstringMportuges\@ordinalstringMportuges
%    \end{macrocode}
% Feminine form:
%    \begin{macrocode}
\newcommand*{\@ordinalstringFportuges}[2]{%
  \let\@unitthstring=\@@unitthstringFportuges
  \let\@unitstring=\@@unitstringFportuges
  \let\@teenthstring=\@@teenthstringportuges
  \let\@tenthstring=\@@tenthstringFportuges
  \let\@hundredthstring=\@@hundredthstringFportuges
  \def\@thousandth{mil\'esima}%
  \@@ordinalstringportuges{#1}{#2}%
}%
\global\let\@ordinalstringFportuges\@ordinalstringFportuges
%    \end{macrocode}
% Make neuter same as masculine:
%    \begin{macrocode}
\global\let\@ordinalstringNportuges\@ordinalstringMportuges
%    \end{macrocode}
% As above, but initial letters in upper case (masculine):
%    \begin{macrocode}
\newcommand*{\@OrdinalstringMportuges}[2]{%
  \let\@unitthstring=\@@Unitthstringportuges
  \let\@unitstring=\@@Unitstringportuges
  \let\@teenthstring=\@@teenthstringportuges
  \let\@tenthstring=\@@Tenthstringportuges
  \let\@hundredthstring=\@@Hundredthstringportuges
  \def\@thousandth{Mil\'esimo}%
  \@@ordinalstringportuges{#1}{#2}%
}%
\global\let\@OrdinalstringMportuges\@OrdinalstringMportuges
%    \end{macrocode}
% Feminine form:
%    \begin{macrocode}
\newcommand*{\@OrdinalstringFportuges}[2]{%
  \let\@unitthstring=\@@UnitthstringFportuges
  \let\@unitstring=\@@UnitstringFportuges
  \let\@teenthstring=\@@teenthstringportuges
  \let\@tenthstring=\@@TenthstringFportuges
  \let\@hundredthstring=\@@HundredthstringFportuges
  \def\@thousandth{Mil\'esima}%
  \@@ordinalstringportuges{#1}{#2}%
}%
\global\let\@OrdinalstringFportuges\@OrdinalstringFportuges
%    \end{macrocode}
% Make neuter same as masculine:
%    \begin{macrocode}
\global\let\@OrdinalstringNportuges\@OrdinalstringMportuges
%    \end{macrocode}
% In order to do the ordinals, split into units, teens, tens
% and hundreds. Units:
%    \begin{macrocode}
\newcommand*\@@unitthstringportuges[1]{%
  \ifcase#1\relax
    zero%
    \or primeiro%
    \or segundo%
    \or terceiro%
    \or quarto%
    \or quinto%
    \or sexto%
    \or s\'etimo%
    \or oitavo%
    \or nono%
  \fi
}%
\global\let\@@unitthstringportuges\@@unitthstringportuges
%    \end{macrocode}
% Tens:
%    \begin{macrocode}
\newcommand*\@@tenthstringportuges[1]{%
  \ifcase#1\relax
    \or d\'ecimo%
    \or vig\'esimo%
    \or trig\'esimo%
    \or quadrag\'esimo%
    \or q\"uinquag\'esimo%
    \or sexag\'esimo%
    \or setuag\'esimo%
    \or octog\'esimo%
    \or nonag\'esimo%
  \fi
}%
\global\let\@@tenthstringportuges\@@tenthstringportuges
%    \end{macrocode}
% Teens:
%    \begin{macrocode}
\newcommand*\@@teenthstringportuges[1]{%
  \@tenthstring{1}%
  \ifnum#1>0\relax
    -\@unitthstring{#1}%
  \fi
}%
\global\let\@@teenthstringportuges\@@teenthstringportuges
%    \end{macrocode}
% Hundreds:
%    \begin{macrocode}
\newcommand*\@@hundredthstringportuges[1]{%
  \ifcase#1\relax
    \or cent\'esimo%
    \or ducent\'esimo%
    \or trecent\'esimo%
    \or quadringent\'esimo%
    \or q\"uingent\'esimo%
    \or seiscent\'esimo%
    \or setingent\'esimo%
    \or octingent\'esimo%
    \or nongent\'esimo%
  \fi
}%
\global\let\@@hundredthstringportuges\@@hundredthstringportuges
%    \end{macrocode}
% Units (feminine):
%    \begin{macrocode}
\newcommand*\@@unitthstringFportuges[1]{%
  \ifcase#1\relax
    zero%
    \or primeira%
    \or segunda%
    \or terceira%
    \or quarta%
    \or quinta%
    \or sexta%
    \or s\'etima%
    \or oitava%
    \or nona%
  \fi
}%
\global\let\@@unitthstringFportuges\@@unitthstringFportuges
%    \end{macrocode}
% Tens (feminine):
%    \begin{macrocode}
\newcommand*\@@tenthstringFportuges[1]{%
  \ifcase#1\relax
    \or d\'ecima%
    \or vig\'esima%
    \or trig\'esima%
    \or quadrag\'esima%
    \or q\"uinquag\'esima%
    \or sexag\'esima%
    \or setuag\'esima%
    \or octog\'esima%
    \or nonag\'esima%
  \fi
}%
\global\let\@@tenthstringFportuges\@@tenthstringFportuges
%    \end{macrocode}
% Hundreds (feminine):
%    \begin{macrocode}
\newcommand*\@@hundredthstringFportuges[1]{%
  \ifcase#1\relax
    \or cent\'esima%
    \or ducent\'esima%
    \or trecent\'esima%
    \or quadringent\'esima%
    \or q\"uingent\'esima%
    \or seiscent\'esima%
    \or setingent\'esima%
    \or octingent\'esima%
    \or nongent\'esima%
  \fi
}%
\global\let\@@hundredthstringFportuges\@@hundredthstringFportuges
%    \end{macrocode}
% As above, but with initial letter in upper case. Units:
%    \begin{macrocode}
\newcommand*\@@Unitthstringportuges[1]{%
  \ifcase#1\relax
    Zero%
    \or Primeiro%
    \or Segundo%
    \or Terceiro%
    \or Quarto%
    \or Quinto%
    \or Sexto%
    \or S\'etimo%
    \or Oitavo%
    \or Nono%
  \fi
}%
\global\let\@@Unitthstringportuges\@@Unitthstringportuges
%    \end{macrocode}
% Tens:
%    \begin{macrocode}
\newcommand*\@@Tenthstringportuges[1]{%
  \ifcase#1\relax
    \or D\'ecimo%
    \or Vig\'esimo%
    \or Trig\'esimo%
    \or Quadrag\'esimo%
    \or Q\"uinquag\'esimo%
    \or Sexag\'esimo%
    \or Setuag\'esimo%
    \or Octog\'esimo%
    \or Nonag\'esimo%
  \fi
}%
\global\let\@@Tenthstringportuges\@@Tenthstringportuges
%    \end{macrocode}
% Hundreds:
%    \begin{macrocode}
\newcommand*\@@Hundredthstringportuges[1]{%
  \ifcase#1\relax
    \or Cent\'esimo%
    \or Ducent\'esimo%
    \or Trecent\'esimo%
    \or Quadringent\'esimo%
    \or Q\"uingent\'esimo%
    \or Seiscent\'esimo%
    \or Setingent\'esimo%
    \or Octingent\'esimo%
    \or Nongent\'esimo%
  \fi
}%
\global\let\@@Hundredthstringportuges\@@Hundredthstringportuges
%    \end{macrocode}
% As above, but feminine. Units:
%    \begin{macrocode}
\newcommand*\@@UnitthstringFportuges[1]{%
  \ifcase#1\relax
    Zera%
    \or Primeira%
    \or Segunda%
    \or Terceira%
    \or Quarta%
    \or Quinta%
    \or Sexta%
    \or S\'etima%
    \or Oitava%
    \or Nona%
  \fi
}%
\global\let\@@UnitthstringFportuges\@@UnitthstringFportuges
%    \end{macrocode}
% Tens (feminine);
%    \begin{macrocode}
\newcommand*\@@TenthstringFportuges[1]{%
  \ifcase#1\relax
    \or D\'ecima%
    \or Vig\'esima%
    \or Trig\'esima%
    \or Quadrag\'esima%
    \or Q\"uinquag\'esima%
    \or Sexag\'esima%
    \or Setuag\'esima%
    \or Octog\'esima%
    \or Nonag\'esima%
  \fi
}%
\global\let\@@TenthstringFportuges\@@TenthstringFportuges
%    \end{macrocode}
% Hundreds (feminine):
%    \begin{macrocode}
\newcommand*\@@HundredthstringFportuges[1]{%
  \ifcase#1\relax
    \or Cent\'esima%
    \or Ducent\'esima%
    \or Trecent\'esima%
    \or Quadringent\'esima%
    \or Q\"uingent\'esima%
    \or Seiscent\'esima%
    \or Setingent\'esima%
    \or Octingent\'esima%
    \or Nongent\'esima%
  \fi
}%
\global\let\@@HundredthstringFportuges\@@HundredthstringFportuges
%    \end{macrocode}
% This has changed in version 1.09, so that it now stores
% the result in the second argument (a control sequence), but it
% doesn't display anything. Since it only affects internal macros,
% it shouldn't affect documents created with older versions.
% (These internal macros are not meant for use in documents.)
%    \begin{macrocode}
\newcommand*\@@numberstringportuges[2]{%
\ifnum#1>99999\relax
  \PackageError{fmtcount}{Out of range}%
  {This macro only works for values less than 100000}%
\else
  \ifnum#1<0\relax
    \PackageError{fmtcount}{Negative numbers not permitted}%
    {This macro does not work for negative numbers, however
    you can try typing "minus" first, and then pass the modulus of
    this number}%
  \fi
\fi
\def#2{}%
\@strctr=#1\relax \divide\@strctr by 1000\relax
\ifnum\@strctr>9\relax
%    \end{macrocode}
% \#1 is greater or equal to 10000
%    \begin{macrocode}
  \divide\@strctr by 10\relax
  \ifnum\@strctr>1\relax
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\@tenstring{\@strctr}}%
    \@strctr=#1 \divide\@strctr by 1000\relax
    \@FCmodulo{\@strctr}{10}%
    \ifnum\@strctr>0
      \ifnum\@strctr=1\relax
        \let\@@fc@numstr#2\relax
        \protected@edef#2{\@@fc@numstr\ \@andname}%
      \fi
      \let\@@fc@numstr#2\relax
      \protected@edef#2{\@@fc@numstr\ \@unitstring{\@strctr}}%
    \fi
  \else
    \@strctr=#1\relax
    \divide\@strctr by 1000\relax
    \@FCmodulo{\@strctr}{10}%
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\@teenstring{\@strctr}}%
  \fi
  \let\@@fc@numstr#2\relax
  \protected@edef#2{\@@fc@numstr\ \@thousand}%
\else
  \ifnum\@strctr>0\relax
    \ifnum\@strctr>1\relax
      \let\@@fc@numstr#2\relax
      \protected@edef#2{\@@fc@numstr\@unitstring{\@strctr}\ }%
    \fi
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\@thousand}%
  \fi
\fi
\@strctr=#1\relax \@FCmodulo{\@strctr}{1000}%
\divide\@strctr by 100\relax
\ifnum\@strctr>0\relax
  \ifnum#1>1000 \relax
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\ }%
  \fi
  \@tmpstrctr=#1\relax
  \@FCmodulo{\@tmpstrctr}{1000}%
  \let\@@fc@numstr#2\relax
  \ifnum\@tmpstrctr=100\relax
    \protected@edef#2{\@@fc@numstr\@tenstring{10}}%
  \else
    \protected@edef#2{\@@fc@numstr\@hundredstring{\@strctr}}%
  \fi%
\fi
\@strctr=#1\relax \@FCmodulo{\@strctr}{100}%
\ifnum#1>100\relax
  \ifnum\@strctr>0\relax
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\ \@andname\ }%
  \fi
\fi
\ifnum\@strctr>19\relax
  \divide\@strctr by 10\relax
  \let\@@fc@numstr#2\relax
  \protected@edef#2{\@@fc@numstr\@tenstring{\@strctr}}%
  \@strctr=#1\relax \@FCmodulo{\@strctr}{10}%
  \ifnum\@strctr>0
    \ifnum\@strctr=1\relax
      \let\@@fc@numstr#2\relax
      \protected@edef#2{\@@fc@numstr\ \@andname}%
    \else
      \ifnum#1>100\relax
        \let\@@fc@numstr#2\relax
        \protected@edef#2{\@@fc@numstr\ \@andname}%
      \fi
    \fi
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\ \@unitstring{\@strctr}}%
  \fi
\else
  \ifnum\@strctr<10\relax
    \ifnum\@strctr=0\relax
      \ifnum#1<100\relax
        \let\@@fc@numstr#2\relax
        \protected@edef#2{\@@fc@numstr\@unitstring{\@strctr}}%
      \fi
    \else %(>0,<10)
      \let\@@fc@numstr#2\relax
      \protected@edef#2{\@@fc@numstr\@unitstring{\@strctr}}%
    \fi
  \else%>10
    \@FCmodulo{\@strctr}{10}%
    \let\@@fc@numstr#2\relax
    \protected@edef#2{\@@fc@numstr\@teenstring{\@strctr}}%
  \fi
\fi
}%
\global\let\@@numberstringportuges\@@numberstringportuges
%    \end{macrocode}
% As above, but for ordinals.
%    \begin{macrocode}
\newcommand*\@@ordinalstringportuges[2]{%
\@strctr=#1\relax
\ifnum#1>99999
\PackageError{fmtcount}{Out of range}%
{This macro only works for values less than 100000}%
\else
\ifnum#1<0
\PackageError{fmtcount}{Negative numbers not permitted}%
{This macro does not work for negative numbers, however
you can try typing "minus" first, and then pass the modulus of
this number}%
\else
\def#2{}%
\ifnum\@strctr>999\relax
  \divide\@strctr by 1000\relax
  \ifnum\@strctr>1\relax
    \ifnum\@strctr>9\relax
      \@tmpstrctr=\@strctr
      \ifnum\@strctr<20
        \@FCmodulo{\@tmpstrctr}{10}%
        \let\@@fc@ordstr#2\relax
        \protected@edef#2{\@@fc@ordstr\@teenthstring{\@tmpstrctr}}%
      \else
        \divide\@tmpstrctr by 10\relax
        \let\@@fc@ordstr#2\relax
        \protected@edef#2{\@@fc@ordstr\@tenthstring{\@tmpstrctr}}%
        \@tmpstrctr=\@strctr
        \@FCmodulo{\@tmpstrctr}{10}%
        \ifnum\@tmpstrctr>0\relax
          \let\@@fc@ordstr#2\relax
          \protected@edef#2{\@@fc@ordstr\@unitthstring{\@tmpstrctr}}%
        \fi
      \fi
    \else
      \let\@@fc@ordstr#2\relax
      \protected@edef#2{\@@fc@ordstr\@unitstring{\@strctr}}%
    \fi
  \fi
  \let\@@fc@ordstr#2\relax
  \protected@edef#2{\@@fc@ordstr\@thousandth}%
\fi
\@strctr=#1\relax
\@FCmodulo{\@strctr}{1000}%
\ifnum\@strctr>99\relax
  \@tmpstrctr=\@strctr
  \divide\@tmpstrctr by 100\relax
  \ifnum#1>1000\relax
    \let\@@fc@ordstr#2\relax
    \protected@edef#2{\@@fc@ordstr-}%
  \fi
  \let\@@fc@ordstr#2\relax
  \protected@edef#2{\@@fc@ordstr\@hundredthstring{\@tmpstrctr}}%
\fi
\@FCmodulo{\@strctr}{100}%
\ifnum#1>99\relax
  \ifnum\@strctr>0\relax
    \let\@@fc@ordstr#2\relax
    \protected@edef#2{\@@fc@ordstr-}%
  \fi
\fi
\ifnum\@strctr>9\relax
  \@tmpstrctr=\@strctr
  \divide\@tmpstrctr by 10\relax
  \let\@@fc@ordstr#2\relax
  \protected@edef#2{\@@fc@ordstr\@tenthstring{\@tmpstrctr}}%
  \@tmpstrctr=\@strctr
  \@FCmodulo{\@tmpstrctr}{10}%
  \ifnum\@tmpstrctr>0\relax
    \let\@@fc@ordstr#2\relax
    \protected@edef#2{\@@fc@ordstr-\@unitthstring{\@tmpstrctr}}%
  \fi
\else
  \ifnum\@strctr=0\relax
    \ifnum#1=0\relax
      \let\@@fc@ordstr#2\relax
      \protected@edef#2{\@@fc@ordstr\@unitstring{0}}%
    \fi
  \else
    \let\@@fc@ordstr#2\relax
    \protected@edef#2{\@@fc@ordstr\@unitthstring{\@strctr}}%
  \fi
\fi
\fi
\fi
}%
\global\let\@@ordinalstringportuges\@@ordinalstringportuges
%    \end{macrocode}
\iffalse Local variables: \fi
\iffalse mode: docTeX     \fi
\iffalse End:             \fi
